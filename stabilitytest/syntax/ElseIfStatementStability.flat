package "stabilitytest/syntax"

import "flatlang/datastruct/list/Iterator"

import "novex/nest/Nest"
import "novex/nest/TestSuite"

import static "novex/nest/Nest"

testable class ElseIfStatementStability {
  [Test "Testing basic else-if statement with scope"]
  testBasicElseIfStatementWithScope() {
    var value = false

    if (value) {
      fail("Got inside if instead of else-if")
    } else if (!value) {
      value = true
    } else {
      fail("Got inside else instead of else-if")
    }

    expect(value).toBe(true, "Failed to get inside basic else-if statement with scope")
  }

  [Test "Testing basic single line else-if statement without scope"]
  testBasicSingleLineElseIfStatementWithoutScope() {
    var value = false

    if (value) {
      fail("Got inside if instead of else-if")
    } else if (!value) value = true
    else {
      fail("Got inside else instead of else-if")
    }

    expect(value).toBe(true, "Failed to get inside basic continuation line else-if statement without scope")
  }

  [Test "Testing basic single line else-if statement without scope with single line if statement without scope"]
  testBasicSingleLineElseIfStatementWithoutScopeWithSingleLineIfStatementWithoutScope() {
    var value = false

    if (value) fail("Got inside if instead of else-if")
    else if (!value) value = true
    else {
      fail("Got inside else instead of else-if")
    }

    expect(value).toBe(true, "Failed to get inside basic continuation line else-if statement without scope with single line if statement without scope")
  }

  [Test "Testing basic single line else-if statement without scope with continuation line if statement without scope"]
  testBasicSingleLineElseIfStatementWithoutScopeWithContinuationLineIfStatementWithoutScope() {
    var value = false

    if (value)
      fail("Got inside if instead of else-if")
    else if (!value) value = true
    else fail("Got inside else instead of else-if")

    expect(value).toBe(true, "Failed to get inside basic continuation line else-if statement without scope with continuation line if statement without scope")
  }

  [Test "Testing basic continuation line else-if statement without scope"]
  testBasicContinuationLineElseIfStatementWithoutScope() {
    var value = false

    if (value) {
      fail("Got inside if instead of else-if")
    } else if (!value)
      value = true
    else {
      fail("Got inside else instead of else-if")
    }

    expect(value).toBe(true, "Failed to get inside basic continuation line else-if statement without scope")
  }

  [Test "Testing basic multi-continuation line else-if statement without scope"]
  testBasicMultiContinuationLineElseIfStatementWithoutScope() {
    var value = false

    if (value) {
      fail("Got inside (first) if instead of else-if")
    } else if (!value)
      value =
      true
    else {
      fail("Got inside else instead of else-if")
    }

    expect(value).toBe(true, "Failed to get inside basic multi-continuation line (first) else-if statement without scope")

    value = false

    if (value) {
      fail("Got inside (second) if instead of else-if")
    } else if (!value)
      value
      = true
    else {
      fail("Got inside else instead of else-if")
    }

    expect(value).toBe(true, "Failed to get inside basic multi-continuation line (second) else-if statement without scope")

    value = false

    if (value) {
      fail("Got inside (third) if instead of else-if")
    } else if (!value)
      value
      =
      true
    else {
      fail("Got inside else instead of else-if")
    }

    expect(value).toBe(true, "Failed to get inside basic multi-continuation line (third) else-if statement without scope")
  }
}