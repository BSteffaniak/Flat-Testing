package "stabilitytest"

import "nova/time/Timer"
import "nova/time/DateTime"
import "nova/time/DateTime.InvalidDateException"
import "nova/time/Interval"
import "nova/thread/Thread"

import "novex/nest/Nest"
import "novex/nest/TestSuite"

import static "novex/nest/Nest"

testable class IntervalStability {
    test oneDayInterval() {
        let oneDay = new Interval(new DateTime(2017, 3, 26), new DateTime(2017, 3, 27))
        
        expect(oneDay.days).toBe(1, "Invalid days: #oneDay.days != 1")
        expect(oneDay.seconds).toBe(86400, "Invalid seconds: #oneDay.seconds != 86400")
        expect(oneDay.remainingSeconds).toBe(0, "Invalid remaining seconds: #oneDay.remainingSeconds != 0")
        expect(oneDay.milliseconds).toBe(86400 * 1000, "Invalid milliseconds: #oneDay.milliseconds != #{86400 * 1000}")
        expect(oneDay.remainingMilliseconds).toBe(0, "Invalid remainingMilliseconds: #oneDay.remainingMilliseconds != 0")
        expect(oneDay.months).toBe(0, "Invalid months: #oneDay.months != 0")
        expect(oneDay.remainingMonths).toBe(0, "Invalid remainingMonths: #oneDay.remainingMonths != 0")
        expect(oneDay.years).toBe(0, "Invalid years: #oneDay.years != 0")
    }
    
    test twoDayInterval() {
        let twoDays = new Interval(new DateTime(2017, 3, 26), new DateTime(2017, 3, 28))
        
        expect(twoDays.days).toBe(2, "Invalid days: #twoDays.days != 2")
        expect(twoDays.seconds).toBe(86400 * 2, "Invalid seconds: #twoDays.seconds != #{86400 * 2}")
        expect(twoDays.remainingSeconds).toBe(0, "Invalid remaining seconds: #twoDays.remainingSeconds != 0")
        expect(twoDays.milliseconds).toBe(86400 * 2 * 1000, "Invalid milliseconds: #twoDays.milliseconds != #{86400 * 2 * 1000}")
        expect(twoDays.remainingMilliseconds).toBe(0, "Invalid remainingMilliseconds: #twoDays.remainingMilliseconds != 0")
        expect(twoDays.months).toBe(0, "Invalid months: #twoDays.months != 0")
        expect(twoDays.remainingMonths).toBe(0, "Invalid remainingMonths: #twoDays.remainingMonths != 0")
        expect(twoDays.years).toBe(0, "Invalid years: #twoDays.years != 0")
    }
    
    test twoAndAHalfDayInterval() {
        let interval = new Interval(new DateTime(2017, 3, 26), new DateTime(2017, 3, 28, 12))
        
        expect(interval.days).toBe(2, "Invalid days: #interval.days != 2")
        expect(interval.seconds).toBe((Int)(86400 * 2.5), "Invalid seconds: #interval.seconds != #{(Int)(86400 * 2.5)}")
        expect(interval.remainingSeconds).toBe(0, "Invalid remaining seconds: #interval.remainingSeconds != 0")
        expect(interval.milliseconds).toBe((Int)(86400 * 2.5 * 1000), "Invalid milliseconds: #interval.milliseconds != #{(Int)(86400 * 2.5 * 1000)}")
        expect(interval.remainingMilliseconds).toBe(0, "Invalid remainingMilliseconds: #interval.remainingMilliseconds != 0")
        expect(interval.months).toBe(0, "Invalid months: #interval.months != 0")
        expect(interval.remainingMonths).toBe(0, "Invalid remainingMonths: #interval.remainingMonths != 0")
        expect(interval.years).toBe(0, "Invalid years: #interval.years != 0")
    }
    
    test twoMonthInterval() {
        let interval = new Interval(new DateTime(2017, 3, 26), new DateTime(2017, 5, 28))
        
        expect(interval.days).toBe(63, "Invalid days: #interval.days != 63")
        expect(interval.seconds).toBe(86400 * 63, "Invalid seconds: #interval.seconds != #{86400 * 63}")
        expect(interval.remainingSeconds).toBe(0, "Invalid remaining seconds: #interval.remainingSeconds != 0")
        expect(interval.milliseconds).toBe((Long)86400 * 63 * 1000, "Invalid milliseconds: #interval.milliseconds != #{(Long)86400 * 63 * 1000}")
        expect(interval.remainingMilliseconds).toBe(0, "Invalid remainingMilliseconds: #interval.remainingMilliseconds != 0")
        expect(interval.months).toBe(2, "Invalid months: #interval.months != 2")
        expect(interval.remainingMonths).toBe(2, "Invalid remainingMonths: #interval.remainingMonths != 2")
        expect(interval.years).toBe(0, "Invalid years: #interval.years != 0")
    }
    
    test oneYearInterval() {
        let interval = new Interval(new DateTime(2016, 3, 26), new DateTime(2017, 3, 26))
        
        expect(interval.days).toBe(365, "Invalid days: #interval.days != 365")
        expect(interval.seconds).toBe(86400 * 365, "Invalid seconds: #interval.seconds != #{86400 * 365}")
        expect(interval.remainingSeconds).toBe(0, "Invalid remaining seconds: #interval.remainingSeconds != 0")
        expect(interval.milliseconds).toBe((Long)86400 * 365 * 1000, "Invalid milliseconds: #interval.milliseconds != #{(Long)86400 * 365 * 1000}")
        expect(interval.remainingMilliseconds).toBe(0, "Invalid remainingMilliseconds: #interval.remainingMilliseconds != 0")
        expect(interval.months).toBe(12, "Invalid months: #interval.months != 12")
        expect(interval.remainingMonths).toBe(0, "Invalid remainingMonths: #interval.remainingMonths != 0")
        expect(interval.years).toBe(1, "Invalid years: #interval.years != 1")
    }
    
    test twoAndAHalfYearInterval() {
        let interval = new Interval(new DateTime(2015, 3, 26), new DateTime(2017, 9, 26))
        
        let Int days = 6 + 275 + 366 + 273 - 5
        
        expect(interval.days).toBe(days, "Invalid days: #interval.days != #days")
        expect(interval.seconds).toBe(86400 * days, "Invalid seconds: #interval.seconds != #{86400 * days}")
        expect(interval.remainingSeconds).toBe(0, "Invalid remaining seconds: #interval.remainingSeconds != 0")
        expect(interval.milliseconds).toBe((Long)86400 * days * 1000, "Invalid milliseconds: #interval.milliseconds != #{(Long)86400 * days * 1000}")
        expect(interval.remainingMilliseconds).toBe(0, "Invalid remainingMilliseconds: #interval.remainingMilliseconds != 0")
        expect(interval.months).toBe(30, "Invalid months: #interval.months != 30")
        expect(interval.remainingMonths).toBe(6, "Invalid remainingMonths: #interval.remainingMonths != 6")
        expect(interval.years).toBe(2, "Invalid years: #interval.years != 2")
    }
}