package "stabilitytest"

import "nova/network/ServerSocket"
import "nova/network/ClientSocket"
import "nova/network/ConnectionSocket"

import "novex/nest/Nest"
import "novex/nest/TestSuite"

import static "novex/nest/Nest"

testable class NetworkStability {
    visible static final String received = "THIS IS THE STRING THAT SHOULD BE RECEIVEDTHIS IS THE STRING THAT SHOULD BE RECEIVEDTHIS IS THE STRING THAT SHOULD BE RECEIVEDTHIS IS THE STRING THAT SHOULD BE RECEIVEDTHIS IS THE STRING THAT SHOULD BE RECEIVEDTHIS IS THE STRING THAT SHOULD BE RECEIVEDTHIS IS THE STRING THAT SHOULD BE RECEIVED"
    
    visible static final Int PORT = 24243
    
    [Test "Testing creating a ServerSocket"]
    createServer() -> ServerSocket {
        let socket = new ServerSocket()
        
        expect(socket.start(PORT)).toNotBe(null, "Unable to start server on port #PORT")
        expect(socket.close()).toBe(true, "Failed to close server socket on port #PORT")
    }
    
    [Test message: false]
    public test() {
        out.writeLine("Testing network stability")
        
        ServerSocket server = new ServerSocket().start(PORT)
        
        ClientThread thread = new ClientThread(PORT, out)
        
        thread.start()
        
        out.writeLine("Accepting ClientSocket connection")
        
        ConnectionSocket connection = server.acceptClient()
        
        expect(connection).toNotBe(null, "Failed to accept the client")
        
        out.writeLine("Sending String to ClientSocket...")
        
        expect(connection.out.write(received)).toNotBe(null, "Server unable to send data to client")
        
        out.writeLine("Waiting for String from ClientSocket...")
        
        String s = connection.in.readString()
        
        expect(s.count == received.count && s == received).toBe(true, "Server unable to receive correct message from client. Expected message of size #received.count, but received of size #s.count")
        
        thread.join()
        
        out.write("Attempting to close ServerSocket connection... ")
        
        expect(server.close()).toBe(true, "Unable to close server")

        out.writeLine("Success")
    }
}