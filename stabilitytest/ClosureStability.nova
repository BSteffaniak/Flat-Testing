package "stabilitytest"

import "novex/nest/Nest"
import "novex/nest/TestSuite"

import static "novex/nest/Nest"

testable class ClosureStability {
    static final Double TOLERANCE = 0.0000000001
    
    var Int number
    
    incrementNumber() => number++
    
    [Test "Testing static math closures"]
    testMathClosures() {
        Int a = 5
        Int b = 3
        
        Double value = 0.5
        
        expectTrue(callClosure(multiply, a, b) == multiply(a, b), "Failed to call multiply(Int, Int) closure")
        expectTrue(callClosure(pow, a, b) == pow(a, b), "Failed to call pow(Int, Int) closure")
        
        expectTrue(mathClosure(Math.sin, value) - Math.sin(value) < TOLERANCE, "Failed to call Math.sin(Double) closure")
        expectTrue(mathClosure(Math.tan, value) - Math.tan(value) < TOLERANCE, "Failed to call Math.tan(Double) closure")
    }
    
    [Test "Testing instance closures"]
    testInstanceClosure() {
        ClosureStability c = new ClosureStability()
        
        instanceClosure(c.incrementNumber)
        
        expectFalse(c.number == 0, "Failed to call incrementNumber() instance closure")
        
        instanceClosure(new ClosureStability().incrementNumber)
        instanceClosure(c.incrementNumber)
    }
    
    static callClosure(closure(Int, Int) -> Int, Int a, Int b) => closure(a, b)
    static mathClosure(closure(Double) -> Double, Double value) => closure(value)
    static instanceClosure(closure()) => closure()
    static multiply(Int value1, Int value2) => value1 * value2
    
    static pow(Int base, Int pow) -> Int {
        Int value = base
        
        for (i in 0..(pow - 1)) {
            value *= base
        }
        
        return value
    }
}