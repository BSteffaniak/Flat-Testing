package "stabilitytest"

import "nova/time/Timer"
import "nova/time/DateTime"
import "nova/time/DateTime.InvalidDateException"
import "nova/thread/Thread"

import "novex/nest/Nest"
import "novex/nest/TestSuite"

import static "novex/nest/Nest"

testable class TimeStability {
    [Test "Testing Time.nova"]
    public test() {
        let timer = new Timer()
        timer.start()
        
        Thread.sleep(100)
        
        timer.stop()
        
        expect(timer.duration >= 99 && timer.duration < 130).toBe(true, "Failed; expected 100ms, found #{timer.duration}ms")
    }
    
    test leapYear() {
        expect(new DateTime(year: 1900).isLeapYear).toBe(false, "1900 is not a leap year")
        expect(new DateTime(year: 2016).isLeapYear).toBe(true, "2016 is a leap year")
        expect(new DateTime(year: 2017).isLeapYear).toBe(false, "2017 is not a leap year")
        expect(new DateTime(year: 2018).isLeapYear).toBe(false, "2018 is not a leap year")
        expect(new DateTime(year: 2019).isLeapYear).toBe(false, "2019 is not a leap year")
        expect(new DateTime(year: 2020).isLeapYear).toBe(true, "2020 is a leap year")
        
        expect({ new DateTime(2017, 2, 29) }).toThrow(InvalidDateException)
        expect({ new DateTime(2016, 2, 29) }).toNotThrow(InvalidDateException)
    }
    
    test invalidDateTimeYear() {
        expect({ new DateTime(year: 0) }).toNotThrow(InvalidDateException)
    }
    
    test invalidDateTimeMonth() {
        expect({ new DateTime(month: 0) }).toThrow(InvalidDateException)
        
        var m = 1
        
        for (i in 0..12) {
            expect({ new DateTime(month: /*100+*/m++) }).toNotThrow(InvalidDateException)
        }
        
        expect({ new DateTime(month: 13) }).toThrow(InvalidDateException)
        expect({ new DateTime(month: -1) }).toThrow(InvalidDateException)
    }
    
    test invalidDateTimeDay() {
        expect({ new DateTime(month: 12, dayOfMonth: 31) }).toNotThrow(InvalidDateException)
        expect({ new DateTime(month: 11, dayOfMonth: 31) }).toThrow(InvalidDateException)
        expect({ new DateTime(2020, 2, 29) }).toNotThrow(InvalidDateException)
        expect({ new DateTime(2021, 2, 29) }).toThrow(InvalidDateException)
        
        DateTime.MONTH_DAYS.forEach((days, month) => {
            var d = 1
            
            for (i in 0..days) {
                expect({ new DateTime(2020, month + 1, d++) }).toNotThrow(InvalidDateException)
            }
            
            expect({ new DateTime(2020, month + 1, -1) }).toThrow(InvalidDateException)
            expect({ new DateTime(2020, month + 1, 0) }).toThrow(InvalidDateException)
            expect({ new DateTime(2020, month + 1, days + 1) }).toThrow(InvalidDateException)
        })
    }
    
    test basicEpochTime() {
        let millis = 1490227200000
        let fromEpoch = new DateTime(millis: millis)
        
        expect(fromEpoch.millis).toBe(millis)
        expect(fromEpoch.year).toBe(2017)
        expect(fromEpoch.month).toBe(3)
        expect(fromEpoch.dayOfMonth).toBe(23)
    }
    
    test newYearEpochTime() {    
        let newYearMillis = 1483228800000
        let newYear = new DateTime(millis: newYearMillis)
        
        expect(newYear.millis).toBe(newYearMillis)
        expect(newYear.year).toBe(2017)
        expect(newYear.month).toBe(1)
        expect(newYear.dayOfMonth).toBe(1)
    }
    
    test newYearEveEpochTime() {
        let newYearEveMillis = 1483142400000
        let newYearEve = new DateTime(millis: newYearEveMillis)
        
        expect(newYearEve.millis).toBe(newYearEveMillis)
        expect(newYearEve.year).toBe(2016)
        expect(newYearEve.month).toBe(12)
        expect(newYearEve.dayOfMonth).toBe(31)
    }
}