package "stabilitytest"

import "nova/time/Timer"
import "nova/thread/Thread"
import "nova/io/File"
import "nova/io/FancyOutputStream"
import "nova/star/Button"
import "nova/star/Label"
import "nova/star/Panel"
import "nova/star/Color"
import "nova/star/ScrollBar"

import "novex/nest/ui/ResultWindow"
import "novex/nest/ui/ResultBar"
import "novex/nest/TestResult"

[TestSuite [ExceptionStability, SyntaxStability, ClosureStability,
        PolymorphismStability, LambdaStability, ToStringStability,
        AssignmentStability, RegexStability, StaticImportStability,
        InnerClassStability, ExternalInnerClassStability, PrimitiveOverloadStability,
        FancyOutputStreamTests, FirstClassFunctionStability]]
[Target c]
[TestSuite [TimeStability, ThreadStability, FileStability, NetworkStability]]
class StabilityTest {
    public static main(String args[]) {
        let test = new StabilityTest()
        
        // let results = new ResultWindow(test, Console.out)
        
        // let resultBar = new ResultBar()
        // resultBar.testCount = 5
        // resultBar.successCount = 2
        
        // Async.execute({
        //     Thread.sleep(1500)
            
        //     resultBar.successCount = 3
        // })
        
        // results.frame.addChild(resultBar)
        // results.show()
        
        // let button = new Button(200, 200, 100, 20, text: "hello", state: Button.PUSH)
        // let button2 = new Button(200, 300, 30, 30, type: Button.TITLE_BAR, state: Button.CLOSE)
        // let label = new Label("testsetset", 50, 100)
        // let scroll = new ScrollBar(0, 0)
        
        // button.addActionListener({
        //     Console.log("Pressed byuttton")
        // })
        
        // results.frame.addChild(button)
        // results.frame.addChild(button2)
        // results.frame.addChild(scroll)
        // results.frame.addChild(label)
        
        // Timer timer = new Timer().start()
        
        let unsucessful = new TestResult[]
        
        // test.test()
        test.runTests(result => {
            if (!result.success) {
                unsucessful.add(result)
            }
        })
        
        let fancy = new FancyOutputStream(headerPattern: "/\\")
        
        if (unsucessful.count > 0) {
            fancy.writeHeader("#unsucessful.count Failure#{unsucessful.count == 1 ? "" : "s"}:", pattern: ":'( ", rightPattern: " )':")
            
            unsucessful.forEach({
                Console.log("#_")
            })
        } else {
            fancy.writeHeader("All Success", pattern: ":) ", symmetrical: true)
        }
        
        // timer.stop()
        
//        if (args[1] == "test")
//        System.execute("Executable.exe a")
        
        // Console.writeLine("Took " + timer.duration + "ms")
        fancy.writeHeader("Hello", "=")
        fancy.writeHeader("Hello")
        fancy.writeLine("hi")
        fancy.writeLine("!!!")
        
        Console.waitForEnter()
    }
}