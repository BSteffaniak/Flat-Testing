package "stabilitytest"

import "flatlang/network/ServerSocket"
import "flatlang/network/ClientSocket"
import "flatlang/network/ConnectionSocket"
import "flatlang/thread/Thread"

import "novex/nest/Nest"
import "novex/nest/TestSuite"

import static "novex/nest/Nest"

testable class NetworkStability {
    visible static final String RECEIVED = "THIS IS THE STRING THAT SHOULD BE RECEIVEDTHIS IS THE STRING THAT SHOULD BE RECEIVEDTHIS IS THE STRING THAT SHOULD BE RECEIVEDTHIS IS THE STRING THAT SHOULD BE RECEIVEDTHIS IS THE STRING THAT SHOULD BE RECEIVEDTHIS IS THE STRING THAT SHOULD BE RECEIVEDTHIS IS THE STRING THAT SHOULD BE RECEIVED"

    visible static final Int PORT = 24243

    [Test "Testing Sockets"]
    public async test() {
        out.writeLine("Testing network stability")

        let server = await new ServerSocket():start(PORT)

        let receivedClientAsync = server.onAsync("client_connected")

        out.write("Accepting ClientSocket connection")

        let responseDataAsync = server.onAsync("data")

        let client = new ClientSocket("localhost", PORT)

        client.connect()

        let receivedClient = await receivedClientAsync

        expect(receivedClient).toNotBe(null, "Failed to accept the client")

        out.writeLine(" - Success")

        out.write("Sending String to ClientSocket")

        expect(client.write(RECEIVED)).toNotBe(null, "Server unable to send data to client")

        out.writeLine(" - Success")

        out.write("Waiting for String from ClientSocket")

        let responseData = await responseDataAsync

        expect(responseData.count == RECEIVED.count && responseData == RECEIVED).toBe(true, "Server unable to receive correct message from client. Expected message of size #RECEIVED.count, but received of size #responseData.count")

        out.writeLine(" - Success")

        out.write("Attempting to close ClientSocket connection")

        expect(client.close()).toNotBe(null, "Unable to close client connection")

        out.writeLine(" - Success")

        out.write("Attempting to close ServerSocket connection ")

        expect(server.close()).toNotBe(null, "Unable to close server")
    }
}