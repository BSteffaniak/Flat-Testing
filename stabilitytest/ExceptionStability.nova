package "stabilitytest"

import "novex/nest/Nest"
import "novex/nest/TestSuite"

import static "novex/nest/Nest"

testable class ExceptionStability {
    [Test message: false]
    public test() {
        Bool worked = false
        
        try {
            testException(out)
        } catch (Exception e) {
            worked = e.class == Exception // Make sure not a sub-class
        }
        
        expectTrue(worked, "Failed to catch Exception")
        
        worked = false
        
        try {
            testSoftExceptions(out)
        } catch all (DivideByZeroException e) {
            worked = true
            
            out.write("- Success\n")
        }
        
        expectTrue(worked, "Failed to catch soft Exception")
    }
    
    testException(OutputStream out) {
        try {
            out.write("Testing DivideByZeroException ")
            
            try {
                // Int den = 0
                // Int i   = 43 / den
                
                throw new DivideByZeroException()
            } catch (DivideByZeroException e) {
                out.write("- Success\n")
                out.write("Testing StabilityTestException ")
                
                throw new StabilityTestException()
            }
            
            fail("Failed to catch DivideByZeroException")
        } catch (StabilityTestException e) {
            out.write("- Success\n")
            
            throw new Exception()
        }
        
        fail("Failed to catch StabilityTestException")
    }
    
    testSoftExceptions(OutputStream out) {
        var worked = false
        
        try {
            out.write("Testing soft exception without a soft catch ")
            
            toss new StabilityTestException()
            
            worked = true
            
            out.write("- Success\n")
        } catch (StabilityTestException e) {
            fail("Caught soft exception without soft keyword")
        }
        
        expectTrue(worked, "Failed to throw soft without corresponding catch")
        
        out.write("Testing soft exception with a soft catch ")
        
        toss new DivideByZeroException()
        
        fail("Failed to exit subroutine after throwing soft Exception")
    }
}