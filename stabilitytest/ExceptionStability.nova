package "stabilitytest"

class ExceptionStability extends StabilityTestCase {
    public construct(StabilityTest program) => super(program)
    
    public test() {
        Console.writeLine("Checking Exception handling...")
        
        Bool worked = false
        
        try {
            testException()
        } catch (Exception e) {
            worked = true
        }
        
        program.fail("Failed to catch Exception", !worked)
        
        worked = false
        
        try {
            testSoftExceptions()
        } catch all (DivideByZeroException e) {
            worked = true
            
            Console.writeLine("OK")
        }
        
        program.fail("Failed to catch soft Exception", !worked)
    }
    
    testException() {
        Bool worked = false
        
        try {
            Console.write("Checking DivideByZeroException... ")
            
            try {
                Int den = 0
                Int i   = 43 / den
            } catch (DivideByZeroException e) {
                worked = true
                
                Console.writeLine("OK")
                Console.write("Checking StabilityTestException... ")
                
                throw new StabilityTestException()
            }
            
            program.fail("Failed to catch DivideByZeroException")
        } catch (StabilityTestException e) {
            program.fail("Failed to catch DivideByZeroException", !worked)
            
            Console.writeLine("OK")
            
            throw new Exception()
        }
        
        program.fail("Failed to catch StabilityTestException", !worked)
    }
    
    testSoftExceptions() {
        Bool worked = false
        
        try {
            Console.write("Checking soft exception without a soft catch... ")
            
            softly throw new StabilityTestException()
            
            worked = true
            
            Console.writeLine("OK")
        } catch (StabilityTestException e) {
            program.fail("Caught soft exception without soft keyword")
        }
        
        program.fail("Failed to throw soft without corresponding catch", !worked)
        
        Console.write("Checking soft exception with a soft catch... ")
        
        softly throw new DivideByZeroException()
        
        program.fail("Failed to exit subroutine after throwing soft Exception")
    }
}