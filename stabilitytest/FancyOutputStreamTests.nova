package "stabilitytest"

import "nova/io/FancyOutputStream"
import "nova/io/StringBuilder"

import "novex/nest/Nest"
import "novex/nest/TestSuite"

import static "novex/nest/Nest"

testable class FancyOutputStreamTests {
    FancyOutputStream stream
    StringBuilder builder
    
    init_test init() {
        builder = new StringBuilder()
        stream = new FancyOutputStream(builder)
    }
    
    clean_test clean() {
        stream = null
        builder = null
    }
    
    test oddHeader() {
        stream.writeHeader("Testing")
        
        let string = builder.toString()
        let expected = "=================================== "
        
        expect(string.count).toBe(81)
        expect(string.last).toBe('\n', "Expected new line at end of header, received '#string.last'")
        expect(string.trim().count).toBe(80)
        expectTrue(string.startsWith(expected), "Header width not correct (#string.count chars)\n#expected\n#string")
    }
    
    test evenHeader() {
        stream.writeHeader("Test")
        
        let string = builder.toString()
        let expected = "===================================== "
        
        expect(string.count).toBe(81)
        expect(string.last).toBe('\n', "Expected new line at end of header, received '#string.last'")
        expect(string.trim().count).toBe(80)
        expectTrue(string.startsWith(expected), "Header width not correct (#string.count chars)\n#expected\n#string")
    }
    
    test headerPattern() {
        stream.headerPattern = "/\\"
        stream.writeHeader("Test")
        
        let string = builder.toString()
        let expected = "/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\ "
        
        expect(string.count).toBe(79, "Header count expected 79, but received #string.count")
        expect(string.last).toBe('\n', "Expected new line at end of header, received '#string.last'")
        expect(string.trim().count).toBe(78, "Trimmed header count expected 78, but received #string.trim().count")
        expectTrue(string.startsWith(expected), "Header width not correct (#string.count chars)\n#expected\n#string")
    }
}