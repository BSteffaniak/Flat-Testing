// Testing single line comment on first line.
package "example"

import "nova/math/logic/WFF"
import "nova/math/logic/InvalidFormulaException"
import "nova/math/logic/StatementLetter"
import "nova/datastruct/HashMap"
import "nova/math/Vector3D"
import "nova/math/Matrix"
import "nova/network/ServerSocket"
import "nova/star/Window"
import "nova/math/NumericStatement"
import "nova/datastruct/BinaryTree"
import "nova/datastruct/list/Array"
import "nova/datastruct/list/IntArray"
import "nova/datastruct/list/Iterator"
import "nova/datastruct/list/LinkedList"
import "nova/datastruct/list/List"

class Lab {
    public static main(String[] args) {
        //var v = new Vector2D(2, 3)
        
        //Console.writeLine(v.x + ", " + v.y)
        
        let strData = ["F", "B", "A", "D", "C", "E", "G", "I", "H"]
        
        var tree = new BinaryTree(strData)
        
        Console.writeLine("Preorder: #{tree.preorder().join(", ")}")
        Console.writeLine("Inorder: #{tree.inorder().join(", ")}")
        Console.writeLine("Postorder: #{tree.postorder().join(", ")}")
        Console.writeLine("Levelorder: #{tree.levelorder().join(", ")}")
        
        Int num1 = 4
        Int num2
        
        num2 = num1 = 7
        
        Console.writeLine("My nums: #num1, #num2 hey: #tree.inorder()!")
        
        Console.log("Sorted array: #strData.sort()")
        
        Console.writeLine("Result from ternary: #num1 #{ num1 < 3 ? "<" : ">=" } 3")
        
        var str = "this isnt null"
        var str2 = null
        
        Console.writeLine("Normal: #{"hello".surroundWith("hey ")}")
        Console.writeLine("Symmetrical: #{"hello".surroundWith("hey ", true)}")
        
        Console.writeLine("Elvis not null: #{str ?: "wtf"}")
        Console.writeLine("Elvis null: #{str2 ?: "this is null"}")
        
        "test".substring(0)
        
        Console.writeLine("#2..8: #{(2..8).join(", ")}")
        
        var list = ["this", "is", "a", "test", "to", "see", "what shows up"]
        var list2 = [1, 2, 3, 4, 5, 6, 7]
        
        //Console.writeLine("Sum: #list2.sum()")
        
        /*list.filter({ _.count > 10 }).map({ getClassByName(_) })
            .forEach(x -> {
                Console.writeLine(x.fields.map({ _.name }).join(", "))
            })*/
        
        Async.execute({
            Console.writeLine("Wait a half a second!")
            Thread.sleep(500)
            Console.writeLine("ok, now what")
        })
        
        var sss = new String[4][2][1]
        
        Console.writeLine(sss)
        
        Console.writeLine("Started async execution")
        
        var multi = new String[][]
        
        multi.add(["This is a test", "index 2"])
        multi.add(["Second dimension yo", "waddup"])
        
        Console.writeLine("Multi dimensional array: #multi")
        Console.writeLine(multi[0][0].chars.contains('z').toString().capitalize())
        
        Console.writeLine(list.map(x -> {
            var something = 5 * x.count
            
            return "#something #x"
        }).join(", "))
        
        Console.writeLine("Mapped: " + list.filter({ _.count >= 4 }).map({ "#_2: #_1?" }).join(", "))
        Console.writeLine("Mapped backwards: " + list.filter({ _.count >= 4 }).map({ "#_?" }).reverse().join(", "))
        Console.writeLine("Mapped2: " + list2.map({ "#_!" }).join(", "))
        
        //doSomething(list)
        //doSomething(list2)
        
        var linked = new LinkedList()
        
        linked.addAll(["test", "test2", "test3"])
        
        Console.writeLine("Linked list backwards: " + linked.reverse().join(", "))
        Console.writeLine("Linked list forwards: " + linked.join(", "))
        
        var x = "Hey its a string"
        
        Console.writeLine(x)
        
        takesString(x)

        if (true) {
            x = new String[]

            x.add("hey")
            x.add("its now an array")
        }

        //x.add("hey")
        //x.add("its now an array")
        
        Console.writeLine(x)
        
        var sq = new Square(4)

        Console.writeLine(getArea(sq))
        
        var v1 = new Vector3D(2, 1, 8)
        var v2 = new Vector3D(5, 3, 2)
        
        Console.writeLine("#v1 X #v2 = #v1.crossProduct(v2)")
        
        var matrix1 = new Matrix(2, 3)
        matrix1[0][0] = 1
        matrix1[0][1] = 2
        matrix1[0][2] = 3
        matrix1[1][0] = 4
        matrix1[1][1] = 5
        matrix1[1][2] = 6
        
        var matrix2 = new Matrix(3, 2)
        matrix2[0][0] = 7
        matrix2[0][1] = 8
        matrix2[1][0] = 9
        matrix2[1][1] = 10
        matrix2[2][0] = 11
        matrix2[2][1] = 12
        
        Console.writeLine("Matrix:\n#matrix1")
        Console.writeLine("Matrix:\n#matrix1.transpose()")
        Console.writeLine("Matrix:\n#matrix2")
        Console.writeLine("Matrix:\n#{matrix1 * matrix2}")
        Console.writeLine("Matrix:\n#{matrix1.transpose() + matrix2}")
        
        var matrix3 = new Matrix(3, 3)
        matrix3[0][0] = 6
        matrix3[0][1] = 1
        matrix3[0][2] = 1
        matrix3[1][0] = 4
        matrix3[1][1] = -2
        matrix3[1][2] = 5
        matrix3[2][0] = 2
        matrix3[2][1] = 8
        matrix3[2][2] = 7
        
        Console.writeLine("Determinant of\n#matrix3\nis #matrix3.determinant()")
        
        Matrix.identity(4)[0][0] = 5
        
        Console.writeLine("4x4 Identity:\n#Matrix.identity(4)")
        Console.writeLine("12x12 Identity:\n#Matrix.identity(12)")
        Console.writeLine("8x8 Identity:\n#Matrix.identity(8)")
        
        Console.writeLine("Inverse of 3x3 matrix:\n#matrix3.inverse()")
        
        let l = new Lab()
        
        l.chainable().chainable()
        
        immutable String[] myImmutableArray = ["one", "two", "three"]
        
        Console.log("Immutable: #myImmutableArray")
        
        let outputArray = myImmutableArray.add("four")
        
        Console.log("Modified(#myImmutableArray.count): #myImmutableArray")
        Console.log("Output(#outputArray.count): #outputArray")
        
        Console.waitForEnter()
    }
    
    chainable() => this {
        Console.writeLine("in chainable")
    }
    
    static takesString(String s) {
        Console.writeLine("Received #s")
    }
    
    static doSomething(List list) {
        list.map({ "#_!!!" }).forEach(Console.writeLine)
    }
    
    static getArea(Polygon p) -> Double {
        return p.calculateArea()
    }
}